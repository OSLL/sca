/*
 * Copyright 2013  Leonid Skorospelov  leosko94@gmail.com
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * 3. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * The advertising clause requiring mention in adverts must never be included.
 */

/*! ---------------------------------------------------------------
 *
 * \file LinkVisual.cpp
 * \brief LinkVisual implementation
 *
 * File description
 *
 * PROJ: OSLL/sca
 * ---------------------------------------------------------------- */

#include "LinkVisual.h"
#include <QPainter>


LinkVisual::LinkVisual(Link *link) :
    ObjectVisual(link)
{    
    m_type = EDGE;

    QPolygon rectArrow(QRect(0, 0, DEFAULT_ARROW_VISUAL_HEIGHT, DEFAULT_ARROW_VISUAL_HEIGHT));
    m_destArrow = new QGraphicsPolygonItem(rectArrow, this);
    m_sourceArrow = NULL;
}

LinkVisual::LinkVisual(Node *source, Node *dest):
    ObjectVisual(new Link(source->getObject(), dest->getObject()))
{
    m_type = EDGE;

    m_source = source;
    m_dest = dest;
}

QRectF LinkVisual::boundingRect() const
{

}

void LinkVisual::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    refreshGeometry();

    painter->drawLine(m_line);
}

//QVariant LinkVisual::itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant &value)
//{
//    refreshGeometry();
//    return QGraphicsItem::itemChange(change, value);
//}

void LinkVisual::refreshGeometry()
{
    prepareGeometryChange();
    qreal   sourceCX = m_source->x() + m_source->boundingRect().center().x();
    qreal   sourceCY = m_source->y() + m_source->boundingRect().center().x();

    qreal   destCX = m_dest->x() + m_dest->boundingRect().center().x();
    qreal   destCY = m_dest->y() + m_dest->boundingRect().center().y();

    qreal   posX = (sourceCX + destCX) / 2;
    qreal   posY = (sourceCY + destCY) / 2;

    QPointF begin(sourceCX - posX, sourceCY - posY);
    QPointF end(destCX - posX, destCY - posY);

    setX( posX );
    setY( posY );

    setLine( QLineF(begin, end) );
}

void LinkVisual::setLine(const QLineF &line)
{
    m_line = line;
}
\

